// pipeline {
//   agent any
//   parameters {
//     password (name: 'AWS_ACCESS_KEY_ID')
//     password (name: 'AWS_SECRET_ACCESS_KEY')
//   }
//   environment {
//     // TF_WORKSPACE = 'terraform' //Sets the Terraform Workspace
//     // TF_IN_AUTOMATION = 'true'
//     AWS_ACCESS_KEY_ID = "${params.AWS_ACCESS_KEY_ID}"
//     AWS_SECRET_ACCESS_KEY = "${params.AWS_SECRET_ACCESS_KEY}"
//   }
//   stages {
//     stage('Check git repo') { 
//       steps { 
//           //cleanWs()
//           checkout scm 
//       }
//     }
//     stage('Terraform Init') {
//       steps {
//         sh '''
//         #!/bin/bash
//         cd ./terraform
//         pwd 
//         ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} terraform init
//         '''
//       }
//     }
//     stage('Terraform Plan') {
//       steps {
//         sh '''
//         #!/bin/bash
//         cd ./terraform
//         pwd 
//         ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} terraform plan 
//         '''
//       }
//     }
//     stage('Terraform Apply') {
//       steps {
//         // input 'Apply Plan'
//         sh '''
//         #!/bin/bash
//         cd ./terraform
//         pwd 
//         ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} terraform apply 
//         '''
//       }
//     }
//   }
// }

pipeline {
    agent any

    // parameters {
    //     string(name: 'environment', defaultValue: 'default', description: 'Workspace/environment file to use for deployment')
    //     string(name: 'version', defaultValue: '', description: 'Version variable to pass to Terraform')
    //     booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
    // }
    
    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        TF_IN_AUTOMATION      = '1'
    }

    stages {
        stage('Plan') {
            steps {
                script {
                    currentBuild.displayName = params.version
                }
                sh 'cd ./terraform'
                sh 'terraform init -input=false'
                sh 'terraform workspace select ${environment}'
                sh "terraform plan -input=false -out tfplan -var --var-file=environments/${environment}.tfvars"
                sh 'terraform show -no-color tfplan > tfplan.txt'
            }
        }

        stage('Approval') {
            steps {
                script {
                    def plan = readFile 'tfplan.txt'
                    input message: "Do you want to apply the plan?"
                }
            }
        }

        stage('Apply') {
            steps {
                sh 'cd ./terraform'
                sh "terraform apply -input=false tfplan"
            }
        }
    }

    // post {
    //     always {
    //         archiveArtifacts artifacts: 'tfplan.txt'
    //     }
    // }
}